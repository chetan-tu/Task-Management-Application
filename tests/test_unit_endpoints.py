# tests/test_tasks.py
from datetime import datetime
import pytest
from fastapi.testclient import TestClient
from apps.main import app  # Import your FastAPI app

client = TestClient(app)

# Sample data for creating a task
sample_task = {
    "title": "Sample Task",
    "description": "A test description",
    "status": "Open"
}

# Sample data for updating a task
updated_task_data = {
    "title": "Updated Task",
    "description": "An updated description",
    "status": "In Progress"
}

@pytest.fixture
def create_task():
    """Fixture to create a task for testing."""
    response = client.post("/tasks/", json=sample_task)
    assert response.status_code == 201
    return response.json()

# CRUD Operation Tests
def test_create_task():
    """Test the creation of a new task, including ID, created_at, and updated_at fields."""
    response = client.post("/tasks/", json=sample_task)
    assert response.status_code == 201
    data = response.json()
    
    # Check explicitly set fields
    assert data["title"] == sample_task["title"]
    assert data["description"] == sample_task["description"]
    assert data["status"] == sample_task["status"]
    
    # Check autogenerated fields by the database
    assert "id" in data  # Confirm that an ID was generated
    assert data["id"] is not None
    
    assert "created_at" in data  # Confirm created_at timestamp exists
    assert data["created_at"] is not None
    
    assert "updated_at" in data  # Confirm updated_at timestamp exists
    assert data["updated_at"] is not None
    
    # Compare date and time without microseconds
    created_at = datetime.fromisoformat(data["created_at"]).replace(microsecond=0)
    updated_at = datetime.fromisoformat(data["updated_at"]).replace(microsecond=0)
    assert created_at == updated_at  # Confirm they match to the second

# Testing retreiving all tasks
def test_read_all_tasks():
    response = client.get("/tasks/")
    assert response.status_code == 200
    assert isinstance(response.json(), list)

#Testing retreiving single task by ID
def test_read_task(create_task):
    task_id = create_task["id"] # Data from fixture
    response = client.get(f"/tasks/{task_id}")
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == task_id
    assert data["title"] == sample_task["title"]

#Testing updating an existing task by ID
def test_update_task(create_task):
    task_id = create_task["id"]
    response = client.put(f"/tasks/{task_id}", json=updated_task_data)
    assert response.status_code == 200
    data = response.json()
    assert data["title"] == updated_task_data["title"]
    assert data["description"] == updated_task_data["description"]
    assert data["status"] == updated_task_data["status"]
    
    # Testing updated_at and created_at are not same
    assert data["updated_at"] != data["created_at"]

#Testing deleting a task by ID
def test_delete_task(create_task):
    task_id = create_task["id"]
    response = client.delete(f"/tasks/{task_id}")
    assert response.status_code == 204

    # Verify that the task is no longer accessible
    response = client.get(f"/tasks/{task_id}")
    assert response.status_code == 404

# Missing title test case
def test_create_task_missing_title():
    incomplete_task = {"description": "Missing title", "status": "Open"}
    response = client.post("/tasks/", json=incomplete_task)
    assert response.status_code == 422

# Invalid status test case
def test_create_task_invalid_status():
    invalid_task = {"title": "Invalid Status Task", "status": "InvalidStatus"}
    response = client.post("/tasks/", json=invalid_task)
    assert response.status_code == 422

# Non-existent task test case
def test_update_nonexistent_task():
    # Attempt to update a task with an ID that does not exist
    response = client.put("/tasks/9999", json=updated_task_data)
    assert response.status_code == 404
    assert response.json() == {"detail": "Task with ID 9999 not found"}

#Test deleting a task that does not exist
def test_delete_nonexistent_task():
    response = client.delete("/tasks/9999")
    assert response.status_code == 404

